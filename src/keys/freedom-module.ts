/// <reference path='../../../third_party/typings/es6-promise/es6-promise.d.ts' />
/// <reference path='../../../third_party/typings/freedom/freedom-module-env.d.ts' />
/// <reference path='../../../third_party/typings/node/node.d.ts' />
/// <reference path='../../../third_party/typings/ssh2/ssh2.d.ts' />

import logging = require('../logging/logging');
import loggingTypes = require('../loggingprovider/loggingprovider.types');

import * as ssh2 from 'ssh2';
var Client = require('ssh2').Client;

export var loggingController = freedom['loggingcontroller']();
loggingController.setDefaultFilter(loggingTypes.Destination.console,
                                   loggingTypes.Level.debug);

var log :logging.Log = new logging.Log('keys');

// 4096 bits
// var encoded = 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBeVhGanhGc1BzMHhINllPSXhDY0ZLQ1Q0T3dJWk9wTHJaOFNBM215YTZuamdqTSs3CnpCU1FFVEZDNC83OS9LbExPWng2NnFJdlJpd0swUXN2ZzEwSDYwaXN2REhSbG0xaGgwZ2NQRXk1M0Exdk5kR0QKSUlacDdJMEpjQjNEb053NEY3UGd3N2JzcEtFVlB3aWVvMFdvODU3cEw5VTRtMUtrMERLTFJWTnl6dEhrb2c0bQpJeGkyL29STjhiK0RjdDdkZ3pNemYza1ZxSjY2N2ZTTzVrU0hsNnZjamY5NmlzcWRtaWpCVXd3RkJFTml3S2hNCklSWHo4dERSbDRBTVlXb05wMVAyYitsTUt6VnkySjRSOE9DbVdqNU80S2tMWjYwOER2NmJtKy9pdE9ueUxDcUMKdnJ0Q0VZdUVHc25VZklXYXdLK1FtUVVyYjNKd0NTRzVmVVJJYURXdjNGazc4Rnp6TXZyN1E2dm5jcDBTZm9HQQpZWTBKTUJXdnN5V3BpVzNRaUk3R1JwVTF0TFFmZ0o0ZXl2THlsUjZzSkRHZVhMbDdUaUhBaVRnWCtURkJsV2g2CnIxQ2J3bEo4YWs4UkIvT3BsSTdYcU5ZUEpoaE9QOW1wN3VGam44ZmhkNkcySWg4Qit0M0hrTWpVRnJFOXB6Q2sKdExHeUR4VUc2N0RNWkErdmltaDVkdXlVTyt4UEhVaGZPeEthZk4rTnpwZW1jT0tZbGRBZXpSM0J6QSt6MUpHQQoxVzkrWUdMUFFWajVGSmFUV0ZRRUxMckx1OHF3ZkRBNmV6NUNRZU9JKzFOaUlYbGRHVDYyMlVrbW1xQXh0WTZVCnhMS0s0OUdLTlpuRFpnclRsc3hORnlTbENEdWYwL1dMaTRaclVUeDRzcFhUeXliTUtvKzgwN2FFZXRNQ0F3RUEKQVFLQ0FnQU5NdGE4bU5MUWhxRDNsZHl5TFhSVEN3a1FwTFNPZCszZ29LbG82V2pGRUNKMlYyNFFreEJWY0FyWAo4Vzhtek5qVzczL0dPOVlwSE4yZ2tNRU9ORncrZUVhSkZpS0xYcU5UUDlCSnl5VXFXOTc3Z2J5N3R0TGQ0dWZKClpzbllrbFZDaUZDandpcURKdUxEZkljWVg0b1FYRXNmRFRObVNlWHVsa0UxeTUvc0dTaUh6YkdGL3lxT1JwRHMKMUFXQzAwTmtRMGlPZzVwOXI5akRtcEI2V2VjZ2N1eENpWWkzNjBxa1BTTmRrNTRJaDNuQzhjUDdMdnNLMzgrNwp3M0lNTit5cEdBRS9sK09idVNiTE5xQXFUaTNZSDlqL00xUkIrTUhFb2I0RVc1VlpFVE1DM2M0dlBRbTVLSkVCClNGUVp6STgxTE11bW13WWJpVDM1K3pHeUdYVTg4UE5IYXBIbG82R3ViVDdhbFVUb3dTN3l3dVU3cWhadzhZMjcKNlBYRGp6U2llNHEwYnRNbC9QZGRYVHhyU3hxN3BoUUd2NDBYamNPdUpGZ2FpSVpSeFd3N1llZjdhS2RaMFNXYwp1SlozZW82amRVV0Z1cm02QVpkbFppT2xvNWlmclVpV3EvT3hmTmJvSDRJRy9UUGw2a0ViZmZTdnU4c09DRGxJClJQVHIveVVUWlp3ZFhSK1Nac1dlYVZmV3YrbHJWME84RTlyejBxRnZIY3NxSnhxMk9adUg3TkZrZ2phYlE4NjEKYXlHdWlpb3haYTlucjF1MVdMamFiNXVVUUJvcVFmTzExKzRHTklqbWJpKzZLSFpxeSswbUtkeXQ3MFJPbWt3eQpCU1lCTjd4bFg1dzlhTXJMMmFsZTdJeDJaaU0xdURpL0pHa0t5aWNLdjQ0a2dLM2hBUUtDQVFFQTZKTUtjQmIyClJYY2tPTkFnbXBJS2kza0pRazhmWFpQL2REUFZBUWhEUUJaYUYydUdMbDVCWU5jRlVINlBDRGpKdnE2M0NoUGQKNytBNTdOam1jZ2dxMmk0d3Vzc0lDcmZ3dFV0dVZ1YWExcXNWRnFuN0xXQThadDBFVk91elpFNmdvaVBiSTlYQQp0d2JNQi9XZW1JSzdFaERBYUVxL1dPSC9JQmFpVzREN0tMdjFubTFoUENlNjVqOTFQV1RUUC9QQmNFYnZRbXNKCkJXTXJubXltTW1COFNoQnJWdmcycDVyNk55VHNRVW8vV1dNd0RwOVdCc3Y4S2RJZVV5akIwMEdKVnBCaGdXVEQKYmN4bTh2d2ppTGYwcWZzTTFhZnJ1MUphU0I0WGJPMW9wUGFoQ095K29RRnlQOWxTOUR6b0owQ09DWkFNZkI3TApjVW1OZ2hManpSRWdrd0tDQVFFQTNidWU0dnd2aWFKVU44YzZNVE12TUFXNlN6eFFhandpTkJxYVlDWHo5NVVlCkhzOThPZ2lsaEZQb20yRjcrYUR5eXpQZU55dWkrL2dXdFl2RmpaeTV1a2V3bjZkM2ltZkkvOVZyTkcycjQ4RDQKbm1VUVFKOWVXTVFwYkI0N0RvalJmRXBRQjNRSE8xMEV1RndjY2JtOSs0Vy9YdzRraVN6MUsvS0Z4WXREZFVGbwovUndCRzFLb2VHaE1MSGYwcDlYZi85aWVRU09UNHhoMG5SeGxCb094RExlMWhOdkVtaWVEbU9NaWk4RGJjc3o2Cm5HTnlCYlpCendCSHFIdzE2MlUzTENjOEFMejR4OFh2L3RBSVh2dGtIM2p5OGpvK2NGbXhVMXhjR1FxTkY4bFcKMGk5SFp1UU42R0xvSmpBT3BnUkIreFFXdGFnclJ6b1FjRGdRTFFqa3dRS0NBUUJvUnNVL1RJeE95UVJzbEtTSgpxVUVoRjd1WEIzTEF1a0tuRHpaSnFESys0VWF6aVhvMy8vckFPS2doVngwNlNudnFDdHYyb01HNWM0ZUZNaHJnCnRkakF5a1QrKzFrM3RSRXZ1QXBZM0R4QVU2UzQ3SzI1d3BSU2FuWXV2UjlKc2hkRG0xLzl5VEVHM3YxTDlFeVAKaE0zclk2ZGhHMkovcjVSOEJxbjA3UGV2WTliVW1hWW5Hb2txQXZuRjlSYmliYUFsZnloM1Z4Wk1YQktLalp4VwpxZndRR1J5SGVmTEhZeTBjM0dreFBPRDZhd1o1QitmQ1ZHTlRQT3ByenJKWXplR045bDVCYmJSUjNudXFKbktvCk1oSjR4QjhWREowYzkrZVN2aXN5bzU5dmwwVE1nNWxWQnhqNmw2NGg0ODBUREZhaTR2czJDM2liNnFhUDAzaGYKMFhZUkFvSUJBUUNRb0g5YmVMaWRJcGVpSmozcnQ0SVE1YnVFdFZ1U1g1VER2Wkp5SW05R1R5cHRXRktrRzkyeQpPWFRnWEs2YnZZS0FUbDJrU0w4dmNMdUhRUnJqYXBXdVRuS0RRSjExVm9yQmJIaFhveTFhQ2hWZ1kzVTlZWFlOCm1pMldpd1ZrVHBPdGFWOVg3VE9HWWY3aExadVVCbDVJQUE0Nk55UlhvVTV0a3V2MFZRajBJMjBTbzBDSmpObTgKWi9NL2tpS3ZrbzVmOS9BSmR1WlFXelE5QWpkWEQzRGRaYnB0WlZlUVlUT3g5bjBqQVBGaXFSYlNDUDluZ0dEZQpYMFZlUFY2Q0l1dmd6ZHFTZExBa3hoUHJkYy92L0ROclg5Mi9aNFF3amlCZXlrQjhTT2lNMmxQYUZ1S1ExekhICklUUmhMRGx4eWhjcmFRZ0RCeVRyZVpFZFVVUWp5OGhCQW9JQkFIcGIvSk9jaU4vL1ZEaFFSa2piWmFkNWgvTXAKTlJqdXg4NzZpMkEvL2NnVU1NV1FpU214VGYvV010S3Q5T29wNHl5VGNVcERObWZ4N3haYVRDQTlqSWVoeFkxUAo2YllkMmd3L1hhOFBUdC84WlF2RnJxaWJaWlFuTUwvN1pHNjQ3ak1iU1dJSmFsV0szdS9pN0RHWDBaOG9jcFlTCnk2T1hWYTlDaUYwWGdjei9RcDRlZXYvamJWcnIra2dtTWlqK2ZUM0txSWl0TmNOVjRqMzc0MXRIYVAvbUJvbSsKdXc2TjZDSWViSWN2UmsrdmswQm5ycWd3ODJlTWZlL21HOTdCd2tNU084SmNvZ1NObVhIdzUwQi9ad3hvOEcwTApjTEFqRzJwSzF6T2tIMVc1MGJNMzlzeUhucDRhN29BZGFkN3NTVmNxNkd1YUtaN214bWsrWll5RUJVUT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K';

// 1024 bits
var encoded = 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDWEFJQkFBS0JnUUMxbkl4MDBrYUhWaEFyTjlVblVqTy9Lc0J4R3lhRUVtYUkzMnZUL2Z4MGg2MFFVTXB2Cm9xMEpFeDBLcTNxWkxiY1BFQ0JDR2NtNEhRa0hQNFFzNlVWbTMyS2h3OWRnMGNkVU5ZQnord3lCQVl3VWJzRGMKc2pIdHZyOUJpRUpSbWo4cWhadHJodTdZVVNYSjVEbHRQZDJFcTdIbGZYN3BrMllySTMyMUplTFhBUUlEQVFBQgpBb0dBWUM0c1pLSUlJQnlBSzZOQ0M3VUpHckQxZ2ZFekVMYjkvbmIwa0N6dXluZ2dPNGZON2hsbE1tMGc4RW1vCmYvOHA5NXcrdVVNWEJaNjY3VS9DSEZiZUhaeVJrZVc4Z1M1NWhQMHhQM1VMVDdNWnVtTEh1WW9zVnhScFdOS0kKMkZmamZhWG5jRm85TG5TTlZPbVR4WWNxdTNrTkI2NFpTcUJsbnlNTytiVHFLcEVDUVFEZzVxRlJHOUw4TmM3MgpBbE1BbE01ZEFwWUowbzdHZWJRc2Z2V05XMHIyb3VVNklwVkljd0FnVXJoaUYxSGlKVEFxZ01TNkF1OWx0Q1g1ClBjeTEvcFRiQWtFQXpybC9kd1c3dUNuS2VPTzd2RmU5Z3ZzM3lnWG5sdUpDQVBHLy9PVjRkUlhBL2VaZHJtaHQKSEVxeGd6L1N3aTdhMWErRHdPa0xxVmVCN2UzcHBjUDhVd0pBRUlDNzY2QzREYXZCSVFvd253Vk1VMFRpVDV3MAp2OW1rWC9OOC96OW9zOHBtT2FyWiszUDgyV0pZaDFJZ3Z4QnRoV0RuanFLeWdHc0VzbEpYbUM4ekt3SkJBSW5zCkwwUHMybExENXllQzRZV0drSlVzSVF1enB0RC9RZ1E1UnR0bkNsZ3IzR2hKNDJUeW5TR01JQ1V1VnVKaHVuVnAKTmFGbW12WXZ3U3RLV1dIVWdhc0NRSGtaNlFiaCtHUWpPM0FPYnMrQnlqNkNzOCttZ3NsZVhkWllNTjA1ZWFrMgo1YiswOG5NMG16VEpWTW1NZExkRWxGS1hwRmVYb0FndmZkWmhuS1gxWGlVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=';

var decoded = new Buffer(encoded, 'base64');

new Client().on('ready', () => {
  log.info('ready!');
}).on('error', (e: Error) => {
  log.error('error: %1', e);
}).on('end', () => {
  log.info('end');
}).on('close', (hadError: boolean) => {
  log.info('close');
}).connect({
  host: '172.17.0.3',
  port: 22,
  username: 'test',
  privateKey: decoded
});
